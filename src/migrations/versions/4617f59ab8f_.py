"""empty message

Revision ID: 4617f59ab8f
Revises: 2429d3daa7d
Create Date: 2016-01-12 15:34:22.168256

"""

# revision identifiers, used by Alembic.
revision = '4617f59ab8f'
down_revision = '2429d3daa7d'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import sessionmaker
from sqlalchemy.dialects import postgresql
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import backref, relationship, sessionmaker

import datetime

Base = declarative_base()

class Answer(Base):
    """ Placeholder for the state of the ANswer table that represents the DB schema for this migration """
    __tablename__ = 'answers'
    
    id = sa.Column(sa.Integer, primary_key=True)
    correct = sa.Column(sa.Boolean)
    createdDate = sa.Column(sa.DateTime)
    mastery_id = sa.Column(sa.Integer, sa.ForeignKey('masteries.id', ondelete="CASCADE"))

class Mastery(Base):
    """ Placeholder for the state of the Mastery table that represents the DB schema for this migration """
    __tablename__ = 'masteries'
    MAX_RATING = 5
    
    id = sa.Column(sa.Integer, primary_key=True)
    answerRating = sa.Column(sa.Integer)
    lastCorrectAnswer = sa.Column(sa.DateTime)
    answers = relationship(Answer, backref=backref('mastery'), lazy='subquery')
    
    @property
    def numberOfCorrectAnswers(self):
        """ Return the number of correct answers for this mastery """
        return len([answer for answer in self.answers if answer.correct])
        
    @property
    def mostRecentCorrectAnswer(self):
        """ Return the most recent correct answer """
        correctAnswerDates = [answer.createdDate for answer in self.answers if answer.correct]
        if len(correctAnswerDates) == 0:
            return None
        else:
            return max(correctAnswerDates)

Session = sessionmaker(bind=op.get_bind())
        
def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column('masteries', sa.Column('answerRating', sa.Integer(), nullable=True))
    op.add_column('masteries', sa.Column('lastCorrectAnswer', sa.DateTime(), nullable=True))
    
    # Seed the Mastery Columns from the Answer Data
    session = Session()
    for mastery in session.query(Mastery):
        mastery.answerRating = mastery.numberOfCorrectAnswers
        mastery.lastCorrectAnswer = mastery.mostRecentCorrectAnswer
        session.add(mastery)
    session.commit()
    
    op.drop_table('answers')
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('answers',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('correct', sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column('createdDate', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column('mastery_id', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(['mastery_id'], ['masteries.id'], name='answers_mastery_id_fkey', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name='answers_pkey')
    )
    
    # Seed the Answers from the Mastery Data
    session = Session()
    for mastery in session.query(Mastery):
        for i in range(mastery.answerRating):
            answer = Answer(correct=True, createdDate=mastery.lastCorrectAnswer, mastery=mastery)
        session.add(answer)
    session.commit()
    
    op.drop_column('masteries', 'lastCorrectAnswer')
    op.drop_column('masteries', 'answerRating')
    ### end Alembic commands ###
