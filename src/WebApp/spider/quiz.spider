use angular;
use console;

angular.module('Quiz', ['autofocus', 'ui.bootstrap', 'kao.input', 'kao.loading', 'kao.table', 'Concepts', 'vocab.nav'])
    .factory('OptionsQuestion', fn() {
        fn OptionsQuestion(question) {
            this.question = question;
            this.answerIndex = question.answerIndex;
            this.answerUrl = question.answerUrl;
            this.queryWord = question.queryWord;
            this.options = question.options;
            this.subject = question.subject;
            this.type = question.questionType;
        }
        OptionsQuestion.prototype.isCorrect = fn() {
            return this.selectedIndex == this.question.answerIndex;
        };
        OptionsQuestion.prototype.canSubmit = fn() {
            return this.selectedIndex >= 0;
        };
        return OptionsQuestion;
    })
    .factory('PromptQuestion', fn() {
        fn PromptQuestion(question) {
            this.question = question;
            this.answerUrl = question.answerUrl;
            this.prompt = question.prompt;
            this.answer = question.answer;
            this.displayAnswer = question.displayAnswer;
            this.subject = question.subject;
            this.type = question.questionType;
        }
        PromptQuestion.prototype.isCorrect = fn() {
            return this.enteredText.toLowerCase() == this.question.answer;
        };
        PromptQuestion.prototype.canSubmit = fn() {
            return this.enteredText;
        };
        return PromptQuestion;
    })
    .factory('quizService', fn($http, NavService, LanguageService, OptionsQuestion, PromptQuestion, LoadingTracker) {
        fn Quiz() {
            this.quiz = undefined;
            this.currentQuestionIndex = 0;
            this.correctAnswers = 0;
            this.returnTo = NavService.current().returnTo;
            this.tracker = new LoadingTracker();
            
            var self = this;
            LanguageService.withCurrentLanguage(fn(language) {
                self.tracker.load(language.getQuiz()).success(fn(data) {
                    self.quiz = data.quiz;
                    self.questions = [];
                    self.numberOfQuestions = self.quiz.questions.length;
                    for question in self.quiz.questions {
                        if question.questionType == 'options' {
                            self.questions.push(new OptionsQuestion(question));
                        } else if question.questionType == 'prompt' {
                            self.questions.push(new PromptQuestion(question));
                        }
                    }
                    self.currentQuestion =  self.questions[self.currentQuestionIndex];
                }).error(fn(error) {
                    console.log(error);
                });
            });
        }
        Quiz.prototype.answer = fn() {
            var question = this.currentQuestion;
            var self = this;
            if question.canSubmit() {
                var correct = question.isCorrect();
                self.grading = true;
                $http.post(question.answerUrl, {'correct':correct}).success(fn(data) {
                    question.results = {"correct":correct};
                    if correct {
                        self.correctAnswers += 1;
                    }
                    question.subject.foreign.mastery = data.rating;
                    self.grading = false;
                }).error(fn(error) {
                    console.log(error);
                });
            }
        };
        Quiz.prototype.next = fn() {
            this.currentQuestionIndex = this.currentQuestionIndex+1;
            this.currentQuestion =  this.questions[this.currentQuestionIndex];
            this.completed = (this.currentQuestionIndex == this.questions.length);
        };
        Quiz.prototype.canSubmit = fn() {
            return this.currentQuestion && this.currentQuestion.canSubmit() && !this.grading;
        };
        
        return {
            buildQuiz: fn () {
                return new Quiz();
            }
        };
    })
    .controller('QuizController', fn ($scope, quizService) {
        $scope.quiz = quizService.buildQuiz();
    })
    .directive('question', fn() {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                question: '='
            },
            templateUrl: 'static/partials/directives/question.html'
        };
    })
    .directive('optionsQuestion', fn() {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                question: '='
            },
            controller: fn($scope) {
                $scope.selectOption = fn(index) {
                    $scope.question.selectedIndex = index;
                };
                $scope.selectPreviousOption = fn() {
                    if !$scope.question.selectedIndex? {
                        $scope.question.selectedIndex = 0;
                    } else if $scope.question.selectedIndex > 0 {
                        $scope.question.selectedIndex -= 1;
                    } else {
                        $scope.question.selectedIndex = 0;
                    }
                };
                $scope.selectNextOption = fn() {
                    if !$scope.question.selectedIndex? {
                        $scope.question.selectedIndex = 0;
                    } else if $scope.question.selectedIndex < ($scope.question.options.length-1) {
                        $scope.question.selectedIndex += 1;
                    } else {
                        $scope.question.selectedIndex = $scope.question.options.length-1;
                    }
                };
            },
            templateUrl: 'static/partials/directives/options_question.html'
        };
    })
    .directive('promptQuestion', fn() {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                question: '='
            },
            templateUrl: 'static/partials/directives/prompt_question.html'
        };
    })
    .directive('option', fn() {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                option: '='
            },
            templateUrl: 'static/partials/directives/option.html'
        };
    })
    .directive('quizPanel', fn() {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                quiz: '='
            },
            templateUrl: 'static/partials/directives/quiz_panel.html'
        };
    })
    .directive('quizResults', fn() {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                quiz: '='
            },
            templateUrl: 'static/partials/directives/quiz_results.html'
        };
    })
    .directive('quizBackButton', fn() {
        return {
            restrict: 'E',
            replace: true,
            controller: fn($scope, $element, $timeout) {
                $scope.click = fn() {
                    $timeout(fn() {
                        angular.element($element)[0].click();
                    }, 0);
                };
            },
            templateUrl: 'static/partials/directives/quiz_back_button.html'
        };
    });