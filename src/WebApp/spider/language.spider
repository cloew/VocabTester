use angular;

angular.module('Language', ['kao.auth'])
    .factory('Language', fn($http, $location) {
        fn Language(language) {
            this.language = language;
            this.baseApiUrl = '/api/languages/'+this.language.id;
        }
        Language.prototype.getSymbols = fn() {
            return $http.get(this.baseApiUrl+'/symbols');
        };
        Language.prototype.getSymbolLists = fn() {
            return $http.get(this.baseApiUrl+'/symbollists');
        };
        Language.prototype.getRandomSymbolQuiz = fn() {
            return $http.get(this.baseApiUrl+'/symbols/random/quiz');
        };
        Language.prototype.getSymbolListQuiz = fn(symbolListId) {
            return $http.get(this.baseApiUrl+'/symbollists/'+symbolListId+'/quiz');
        };
        Language.prototype.getWords = fn() {
            return $http.get(this.baseApiUrl+'/words');
        };
        Language.prototype.getWordLists = fn() {
            return $http.get(this.baseApiUrl+'/wordlists');
        };
        Language.prototype.getRandomWordQuiz = fn() {
            return $http.get(this.baseApiUrl+'/words/random/quiz');
        };
        Language.prototype.getWordListQuiz = fn(wordListId) {
            return $http.get(this.baseApiUrl+'/wordlists/'+wordListId+'/quiz');
        };
        Language.prototype.search = fn(data) {
            return $http.post(this.baseApiUrl+'/search', data);
        };
        return Language;
    })
    .service('LanguageService', fn($rootScope, Language, LanguageEnrollmentsService, EnrollmentEvents) {
        var currentLanguage = undefined;
        var changedEvent = 'language-changed';
        this.withCurrentLanguage = fn(callback) {
            if currentLanguage? {
                callback(currentLanguage);
            } else {
                LanguageEnrollmentsService.withCurrentEnrollment().success(fn(enrollment) {
                    callback(new Language(enrollment.language));
                });
            }
        };
        this.watchCurrentLanguage = fn(scope, callback) {
            scope.$on(changedEvent, callback);
            this.withCurrentLanguage(fn(currentLanguage) {
                callback(undefined, currentLanguage);
            });
        };
        LanguageEnrollmentsService.watchCurrentEnrollment($rootScope, fn(event, enrollment) {
            currentLanguage = new Language(enrollment.language);
            $rootScope.$broadcast(changedEvent, currentLanguage);
        });
        $rootScope.$on(EnrollmentEvents.reset, fn() {
            currentLanguage = undefined;
        });
    })
    .service('languages', fn($http) {
        return fn() {return $http.get('/api/languages');};
    });