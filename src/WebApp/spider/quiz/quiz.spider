use angular;
use console;

angular.module('quiz', ['question', 'autofocus', 'ui.bootstrap', 'kao.input', 'kao.loading', 'kao.table', 'Concepts', 'vocab.nav'])
    .factory('quizService', fn($http, NavService, LanguageService, OptionsQuestion, PromptQuestion, LoadingTracker) {
        fn Quiz() {
            this.quiz = undefined;
            this.currentQuestionIndex = 0;
            this.correctAnswers = 0;
            this.returnTo = NavService.current().returnTo;
            this.tracker = new LoadingTracker();
            
            var self = this;
            LanguageService.withCurrentLanguage(fn(language) {
                self.tracker.load(language.getQuiz()).success(fn(data) {
                    self.quiz = data.quiz;
                    self.questions = [];
                    self.numberOfQuestions = self.quiz.questions.length;
                    for question in self.quiz.questions {
                        if question.questionType == 'options' {
                            self.questions.push(new OptionsQuestion(question));
                        } else if question.questionType == 'prompt' {
                            self.questions.push(new PromptQuestion(question));
                        }
                    }
                    self.currentQuestion =  self.questions[self.currentQuestionIndex];
                }).error(fn(error) {
                    console.log(error);
                });
            });
        }
        Quiz.prototype.answer = fn() {
            var question = this.currentQuestion;
            var self = this;
            if question.canSubmit() {
                var correct = question.isCorrect();
                self.grading = true;
                $http.post(question.answerUrl, {'correct':correct}).success(fn(data) {
                    question.results = {"correct":correct};
                    if correct {
                        self.correctAnswers += 1;
                    }
                    question.subject.foreign.mastery = data.rating;
                    self.grading = false;
                }).error(fn(error) {
                    console.log(error);
                });
            }
        };
        Quiz.prototype.next = fn() {
            this.currentQuestionIndex = this.currentQuestionIndex+1;
            this.currentQuestion =  this.questions[this.currentQuestionIndex];
            this.completed = (this.currentQuestionIndex == this.questions.length);
        };
        Quiz.prototype.canSubmit = fn() {
            return this.currentQuestion && this.currentQuestion.canSubmit() && !this.grading;
        };
        
        return {
            buildQuiz: fn () {
                return new Quiz();
            }
        };
    })
    .controller('QuizController', fn ($scope, quizService) {
        $scope.quiz = quizService.buildQuiz();
    })
    .directive('quizPanel', fn() {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                quiz: '='
            },
            templateUrl: 'static/partials/directives/quiz_panel.html'
        };
    })
    .directive('quizResults', fn() {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                quiz: '='
            },
            templateUrl: 'static/partials/directives/quiz_results.html'
        };
    })
    .directive('quizBackButton', fn() {
        return {
            restrict: 'E',
            replace: true,
            controller: fn($scope, $element, $timeout) {
                $scope.click = fn() {
                    $timeout(fn() {
                        angular.element($element)[0].click();
                    }, 0);
                };
            },
            templateUrl: 'static/partials/directives/quiz_back_button.html'
        };
    });