use angular;
use console;

angular.module('quiz.builders', ['question', 'kao.utils', 'kao.loading', 'Forms', 'vocab.nav'])
    .factory('Quiz', fn(NavService, LanguageService, QuestionFactory, AnswerHelper, LoadingTracker) {
        fn Quiz(data) {
            this.quiz = data;
            this.currentQuestionIndex = 0;
            this.correctAnswers = 0;
            this.returnTo = NavService.current().returnTo;
            this.gradeTracker = new LoadingTracker();
            this.questions = QuestionFactory.buildAll(this.quiz.questions);
            this.numberOfQuestions = this.quiz.questions.length;
            this.currentQuestion =  this.questions[this.currentQuestionIndex];
        }
        Quiz.prototype.answer = fn() {
            var self = this;
            var question = this.currentQuestion;
            if question.canSubmit() {
                this.gradeTracker.load(new AnswerHelper(question).answer()).success(fn(data) {
                    if question.results.correct {
                        self.correctAnswers += 1;
                    }
                }).error(fn(error) {
                    console.log(error);
                });
            }
        };
        Quiz.prototype.next = fn() {
            this.currentQuestionIndex = this.currentQuestionIndex+1;
            this.currentQuestion =  this.questions[this.currentQuestionIndex];
            this.completed = (this.currentQuestionIndex == this.questions.length);
        };
        Quiz.prototype.canSubmit = fn() {
            return this.currentQuestion && this.currentQuestion.canSubmit() && !this.grading;
        };
        
        return Quiz;
    })
    .factory('QuizBuilder', fn(Quiz, KaoDefer) {
        fn QuizBuilder(getQuizData) {
            this.getQuizData = getQuizData;
        }
        QuizBuilder.prototype.build = fn() {
            var deferred = KaoDefer();
            this.getQuizData().success(fn(data) {
                deferred.resolve(new Quiz(data.quiz));
            }).error(deferred.reject);
            return deferred.promise;
        };
        return QuizBuilder;
    })
    .factory('ListQuizBuilder', fn($routeParams, FormsService, QuizBuilder) {
        var getQuiz = fn() {
            var form = FormsService.current();
            return form.getQuiz($routeParams.listId);
        };
        return new QuizBuilder(getQuiz);
    })
    .factory('RandomQuizBuilder', fn(FormsService, QuizBuilder) {
        var getQuiz = fn() {
            var form = FormsService.current();
            return form.getRandomQuiz();
        };
        return new QuizBuilder(getQuiz);
    })
    .service('QuizBuilders', fn($route, NavService, ListQuizBuilder, RandomQuizBuilder) {
        var service = {current: fn() {
            return this[$route.current.$$route.path];
        }};
        service[NavService.randomWordQuiz.path] = RandomQuizBuilder;
        service[NavService.wordListQuiz.path] = ListQuizBuilder;
        service[NavService.randomSymbolQuiz.path] = RandomQuizBuilder;
        service[NavService.symbolListQuiz.path] = ListQuizBuilder;
        return service;
    });